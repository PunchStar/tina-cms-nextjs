{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport matter from 'gray-matter';\nimport { useLocalJsonForm } from 'next-tinacms-json';\nimport Layout from '../components/Layout';\nimport BlogList from '../components/BlogList';\n\nconst Index = ({\n  jsonFile,\n  allBlogs\n}) => {\n  const formOptions = {\n    fields: [{\n      name: 'title',\n      label: 'Site Title',\n      component: 'text'\n    }, {\n      name: 'description',\n      label: 'Site Description',\n      component: 'text'\n    }, {\n      name: 'repositoryUrl',\n      label: 'Repository Url',\n      component: 'text'\n    }]\n  };\n  const [data] = useLocalJsonForm(jsonFile, formOptions);\n  return __jsx(Layout, {\n    pathname: \"/\",\n    siteTitle: data.title,\n    siteDescription: data.description\n  }, __jsx(\"section\", null, __jsx(BlogList, {\n    allBlogs: allBlogs\n  })));\n};\n\nexport default Index;\n\nIndex.getInitialProps = async function () {\n  const content = await import(`../data/config.json`); // get all blog data for list\n\n  const posts = (context => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      // Create slug from filename\n      const slug = key.replace(/^.*[\\\\\\/]/, '').split('.').slice(0, -1).join('.');\n      const value = values[index]; // Parse yaml metadata & markdownbody in document\n\n      const document = matter(value.default);\n      return {\n        document,\n        slug\n      };\n    });\n    return data;\n  })(require.context('../posts', true, /\\.md$/));\n\n  return {\n    jsonFile: {\n      fileRelativePath: `src/data/config.json`,\n      data: content.default\n    },\n    allBlogs: posts\n  };\n};","map":{"version":3,"sources":["/Volumes/DATA2/Git/next/tinacms/brevifolia-next-tinacms-master/src/pages/index.js"],"names":["matter","useLocalJsonForm","Layout","BlogList","Index","jsonFile","allBlogs","formOptions","fields","name","label","component","data","title","description","getInitialProps","content","posts","context","keys","values","map","key","index","slug","replace","split","slice","join","value","document","default","require","fileRelativePath"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B;AACzC,QAAMC,WAAW,GAAG;AACnBC,IAAAA,MAAM,EAAE,CACP;AACCC,MAAAA,IAAI,EAAE,OADP;AAECC,MAAAA,KAAK,EAAE,YAFR;AAGCC,MAAAA,SAAS,EAAE;AAHZ,KADO,EAMP;AACCF,MAAAA,IAAI,EAAE,aADP;AAECC,MAAAA,KAAK,EAAE,kBAFR;AAGCC,MAAAA,SAAS,EAAE;AAHZ,KANO,EAWP;AACCF,MAAAA,IAAI,EAAE,eADP;AAECC,MAAAA,KAAK,EAAE,gBAFR;AAGCC,MAAAA,SAAS,EAAE;AAHZ,KAXO;AADW,GAApB;AAmBA,QAAM,CAACC,IAAD,IAASX,gBAAgB,CAACI,QAAD,EAAWE,WAAX,CAA/B;AAEA,SACC,MAAC,MAAD;AACC,IAAA,QAAQ,EAAC,GADV;AAEC,IAAA,SAAS,EAAEK,IAAI,CAACC,KAFjB;AAGC,IAAA,eAAe,EAAED,IAAI,CAACE;AAHvB,KAKC,uBACC,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAER;AAApB,IADD,CALD,CADD;AAWA,CAjCD;;AAmCA,eAAeF,KAAf;;AAEAA,KAAK,CAACW,eAAN,GAAwB,kBAAiB;AACxC,QAAMC,OAAO,GAAG,MAAM,OAAQ,qBAAR,CAAtB,CADwC,CAExC;;AACA,QAAMC,KAAK,GAAG,CAACC,OAAO,IAAI;AACzB,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,EAAb;AACA,UAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAASH,OAAT,CAAf;AACA,UAAMN,IAAI,GAAGO,IAAI,CAACE,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC;AACA,YAAMC,IAAI,GAAGF,GAAG,CACdG,OADW,CACH,WADG,EACU,EADV,EAEXC,KAFW,CAEL,GAFK,EAGXC,KAHW,CAGL,CAHK,EAGF,CAAC,CAHC,EAIXC,IAJW,CAIN,GAJM,CAAb;AAKA,YAAMC,KAAK,GAAGT,MAAM,CAACG,KAAD,CAApB,CAPqC,CAQrC;;AACA,YAAMO,QAAQ,GAAG9B,MAAM,CAAC6B,KAAK,CAACE,OAAP,CAAvB;AACA,aAAO;AACND,QAAAA,QADM;AAENN,QAAAA;AAFM,OAAP;AAIA,KAdY,CAAb;AAeA,WAAOZ,IAAP;AACA,GAnBa,EAmBXoB,OAAO,CAACd,OAAR,CAAgB,UAAhB,EAA4B,IAA5B,EAAkC,OAAlC,CAnBW,CAAd;;AAqBA,SAAO;AACNb,IAAAA,QAAQ,EAAE;AACT4B,MAAAA,gBAAgB,EAAG,sBADV;AAETrB,MAAAA,IAAI,EAAEI,OAAO,CAACe;AAFL,KADJ;AAMNzB,IAAAA,QAAQ,EAAEW;AANJ,GAAP;AAQA,CAhCD","sourcesContent":["import matter from 'gray-matter'\nimport { useLocalJsonForm } from 'next-tinacms-json'\n\nimport Layout from '../components/Layout'\nimport BlogList from '../components/BlogList'\n\nconst Index = ({ jsonFile, allBlogs }) => {\n\tconst formOptions = {\n\t\tfields: [\n\t\t\t{\n\t\t\t\tname: 'title',\n\t\t\t\tlabel: 'Site Title',\n\t\t\t\tcomponent: 'text'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'description',\n\t\t\t\tlabel: 'Site Description',\n\t\t\t\tcomponent: 'text'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'repositoryUrl',\n\t\t\t\tlabel: 'Repository Url',\n\t\t\t\tcomponent: 'text'\n\t\t\t}\n\t\t]\n\t}\n\tconst [data] = useLocalJsonForm(jsonFile, formOptions)\n\n\treturn (\n\t\t<Layout\n\t\t\tpathname='/'\n\t\t\tsiteTitle={data.title}\n\t\t\tsiteDescription={data.description}\n\t\t>\n\t\t\t<section>\n\t\t\t\t<BlogList allBlogs={allBlogs} />\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default Index\n\nIndex.getInitialProps = async function() {\n\tconst content = await import(`../data/config.json`)\n\t// get all blog data for list\n\tconst posts = (context => {\n\t\tconst keys = context.keys()\n\t\tconst values = keys.map(context)\n\t\tconst data = keys.map((key, index) => {\n\t\t\t// Create slug from filename\n\t\t\tconst slug = key\n\t\t\t\t.replace(/^.*[\\\\\\/]/, '')\n\t\t\t\t.split('.')\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.join('.')\n\t\t\tconst value = values[index]\n\t\t\t// Parse yaml metadata & markdownbody in document\n\t\t\tconst document = matter(value.default)\n\t\t\treturn {\n\t\t\t\tdocument,\n\t\t\t\tslug\n\t\t\t}\n\t\t})\n\t\treturn data\n\t})(require.context('../posts', true, /\\.md$/))\n\n\treturn {\n\t\tjsonFile: {\n\t\t\tfileRelativePath: `src/data/config.json`,\n\t\t\tdata: content.default\n\t\t},\n\n\t\tallBlogs: posts\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}