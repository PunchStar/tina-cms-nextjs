{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport matter from 'gray-matter';\nimport { useLocalJsonForm } from 'next-tinacms-json';\nimport Layout from '../components/Layout';\nimport BlogList from '../components/BlogList';\n\nvar Index = function Index(_ref) {\n  var jsonFile = _ref.jsonFile,\n      allBlogs = _ref.allBlogs;\n  var formOptions = {\n    fields: [{\n      name: 'title',\n      label: 'Site Title',\n      component: 'text'\n    }, {\n      name: 'description',\n      label: 'Site Description',\n      component: 'text'\n    }, {\n      name: 'repositoryUrl',\n      label: 'Repository Url',\n      component: 'text'\n    }]\n  };\n\n  var _useLocalJsonForm = useLocalJsonForm(jsonFile, formOptions),\n      _useLocalJsonForm2 = _slicedToArray(_useLocalJsonForm, 1),\n      data = _useLocalJsonForm2[0];\n\n  return __jsx(Layout, {\n    pathname: \"/\",\n    siteTitle: data.title,\n    siteDescription: data.description\n  }, __jsx(\"section\", null, __jsx(BlogList, {\n    allBlogs: allBlogs\n  })));\n};\n\nexport default Index;\n\nIndex.getInitialProps = function _callee() {\n  var content, posts;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(import(\"../data/config.json\"));\n\n        case 2:\n          content = _context.sent;\n\n          // get all blog data for list\n          posts = function (context) {\n            var keys = context.keys();\n            var values = keys.map(context);\n            var data = keys.map(function (key, index) {\n              // Create slug from filename\n              var slug = key.replace(/^.*[\\\\\\/]/, '').split('.').slice(0, -1).join('.');\n              var value = values[index]; // Parse yaml metadata & markdownbody in document\n\n              var document = matter(value[\"default\"]);\n              return {\n                document: document,\n                slug: slug\n              };\n            });\n            return data;\n          }(require.context('../posts', true, /\\.md$/));\n\n          return _context.abrupt(\"return\", {\n            jsonFile: {\n              fileRelativePath: \"src/data/config.json\",\n              data: content[\"default\"]\n            },\n            allBlogs: posts\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Volumes/DATA2/Git/next/tinacms/brevifolia-next-tinacms-master/src/pages/index.js"],"names":["matter","useLocalJsonForm","Layout","BlogList","Index","jsonFile","allBlogs","formOptions","fields","name","label","component","data","title","description","getInitialProps","content","posts","context","keys","values","map","key","index","slug","replace","split","slice","join","value","document","require","fileRelativePath"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACzC,MAAMC,WAAW,GAAG;AACnBC,IAAAA,MAAM,EAAE,CACP;AACCC,MAAAA,IAAI,EAAE,OADP;AAECC,MAAAA,KAAK,EAAE,YAFR;AAGCC,MAAAA,SAAS,EAAE;AAHZ,KADO,EAMP;AACCF,MAAAA,IAAI,EAAE,aADP;AAECC,MAAAA,KAAK,EAAE,kBAFR;AAGCC,MAAAA,SAAS,EAAE;AAHZ,KANO,EAWP;AACCF,MAAAA,IAAI,EAAE,eADP;AAECC,MAAAA,KAAK,EAAE,gBAFR;AAGCC,MAAAA,SAAS,EAAE;AAHZ,KAXO;AADW,GAApB;;AADyC,0BAoB1BV,gBAAgB,CAACI,QAAD,EAAWE,WAAX,CApBU;AAAA;AAAA,MAoBlCK,IApBkC;;AAsBzC,SACC,MAAC,MAAD;AACC,IAAA,QAAQ,EAAC,GADV;AAEC,IAAA,SAAS,EAAEA,IAAI,CAACC,KAFjB;AAGC,IAAA,eAAe,EAAED,IAAI,CAACE;AAHvB,KAKC,uBACC,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAER;AAApB,IADD,CALD,CADD;AAWA,CAjCD;;AAmCA,eAAeF,KAAf;;AAEAA,KAAK,CAACW,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACD,6BADC;;AAAA;AACjBC,UAAAA,OADiB;;AAEvB;AACMC,UAAAA,KAHiB,GAGR,UAAAC,OAAO,EAAI;AACzB,gBAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,EAAb;AACA,gBAAMC,MAAM,GAAGD,IAAI,CAACE,GAAL,CAASH,OAAT,CAAf;AACA,gBAAMN,IAAI,GAAGO,IAAI,CAACE,GAAL,CAAS,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACrC;AACA,kBAAMC,IAAI,GAAGF,GAAG,CACdG,OADW,CACH,WADG,EACU,EADV,EAEXC,KAFW,CAEL,GAFK,EAGXC,KAHW,CAGL,CAHK,EAGF,CAAC,CAHC,EAIXC,IAJW,CAIN,GAJM,CAAb;AAKA,kBAAMC,KAAK,GAAGT,MAAM,CAACG,KAAD,CAApB,CAPqC,CAQrC;;AACA,kBAAMO,QAAQ,GAAG9B,MAAM,CAAC6B,KAAK,WAAN,CAAvB;AACA,qBAAO;AACNC,gBAAAA,QAAQ,EAARA,QADM;AAENN,gBAAAA,IAAI,EAAJA;AAFM,eAAP;AAIA,aAdY,CAAb;AAeA,mBAAOZ,IAAP;AACA,WAnBa,CAmBXmB,OAAO,CAACb,OAAR,CAAgB,UAAhB,EAA4B,IAA5B,EAAkC,OAAlC,CAnBW,CAHS;;AAAA,2CAwBhB;AACNb,YAAAA,QAAQ,EAAE;AACT2B,cAAAA,gBAAgB,wBADP;AAETpB,cAAAA,IAAI,EAAEI,OAAO;AAFJ,aADJ;AAMNV,YAAAA,QAAQ,EAAEW;AANJ,WAxBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import matter from 'gray-matter'\nimport { useLocalJsonForm } from 'next-tinacms-json'\n\nimport Layout from '../components/Layout'\nimport BlogList from '../components/BlogList'\n\nconst Index = ({ jsonFile, allBlogs }) => {\n\tconst formOptions = {\n\t\tfields: [\n\t\t\t{\n\t\t\t\tname: 'title',\n\t\t\t\tlabel: 'Site Title',\n\t\t\t\tcomponent: 'text'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'description',\n\t\t\t\tlabel: 'Site Description',\n\t\t\t\tcomponent: 'text'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'repositoryUrl',\n\t\t\t\tlabel: 'Repository Url',\n\t\t\t\tcomponent: 'text'\n\t\t\t}\n\t\t]\n\t}\n\tconst [data] = useLocalJsonForm(jsonFile, formOptions)\n\n\treturn (\n\t\t<Layout\n\t\t\tpathname='/'\n\t\t\tsiteTitle={data.title}\n\t\t\tsiteDescription={data.description}\n\t\t>\n\t\t\t<section>\n\t\t\t\t<BlogList allBlogs={allBlogs} />\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport default Index\n\nIndex.getInitialProps = async function() {\n\tconst content = await import(`../data/config.json`)\n\t// get all blog data for list\n\tconst posts = (context => {\n\t\tconst keys = context.keys()\n\t\tconst values = keys.map(context)\n\t\tconst data = keys.map((key, index) => {\n\t\t\t// Create slug from filename\n\t\t\tconst slug = key\n\t\t\t\t.replace(/^.*[\\\\\\/]/, '')\n\t\t\t\t.split('.')\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.join('.')\n\t\t\tconst value = values[index]\n\t\t\t// Parse yaml metadata & markdownbody in document\n\t\t\tconst document = matter(value.default)\n\t\t\treturn {\n\t\t\t\tdocument,\n\t\t\t\tslug\n\t\t\t}\n\t\t})\n\t\treturn data\n\t})(require.context('../posts', true, /\\.md$/))\n\n\treturn {\n\t\tjsonFile: {\n\t\t\tfileRelativePath: `src/data/config.json`,\n\t\t\tdata: content.default\n\t\t},\n\n\t\tallBlogs: posts\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}